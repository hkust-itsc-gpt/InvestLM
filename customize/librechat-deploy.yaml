apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: librechat-backend
  name: librechat-backend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: librechat-backend
  template:
    metadata:
      labels:
        app: librechat-backend
    spec:
      containers:
      - image: #{MONGO_IMAGE}#
        imagePullPolicy: Always
        name: mongodb
        command: [ "mongod", "--noauth", "--bind_ip", "0.0.0.0" ]
        ports:
        - containerPort: 27017
          protocol: TCP
        volumeMounts:
        - mountPath: /data/db
          name: librechat-vol
          subPath: mongodb
      - image: #{MEILI_IMAGE}#
        imagePullPolicy: Always
        name: meilisearch
        env:
        - name: MEILI_HOST
          value: "http://librechat-backend-svc:7700"
        - name: MEILI_NO_ANALYTICS
          value: "true"
        - name: MEILI_MASTER_KEY
          value: #{MEILI_MASTER_KEY}#
        ports:
        - containerPort: 7700
          protocol: TCP
        volumeMounts:
        - mountPath: /meili_data
          name: librechat-vol
          subPath: meili_data
      restartPolicy: Always
      volumes:
      - name: librechat-vol
        persistentVolumeClaim:
          claimName: #{PVC_NAME}#
---
apiVersion: v1
kind: Service
metadata:
  name: librechat-backend-svc
spec:
  ports:
  - name: mongo
    port: 27017
    protocol: TCP
    targetPort: 27017
  - name: meilisearch
    port: 7700
    protocol: TCP
    targetPort: 7700
  selector:
    app: librechat-backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mongo-express
  name: mongo-express-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-express
  template:
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
      - image: #{EXPRESS_IMAGE}#
        imagePullPolicy: Always
        name: mongo-express
        env:
        - name: ME_CONFIG_MONGODB_SERVER
          value: "librechat-backend-svc"
        - name: ME_CONFIG_BASICAUTH_USERNAME
          value: "#{EXPRESS_ADMIN}#"
        - name: ME_CONFIG_BASICAUTH_PASSWORD
          value: "#{EXPRESS_PASSWORD}#"
        - name: ME_CONFIG_MONGODB_URL
          value: "mongodb://librechat-backend-svc:27017"
        - name: ME_CONFIG_SITE_BASEURL
          value: "/mongo-express"
        ports:
        - containerPort: 8081
          protocol: TCP
      initContainers:
      - name: init-mongodb
        image: mcr.microsoft.com/azurelinux/busybox:1.36
        command: ['sh', '-c', "until nc -w 1 librechat-backend-svc.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local 27017; do echo waiting for mongodb; sleep 2; done"]
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-express-svc
spec:
  ports:
  - name: mongo-express
    port: 8081
    protocol: TCP
    targetPort: 8081
  selector:
    app: mongo-express
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: librechat
  name: librechat-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: librechat
  template:
    metadata:
      labels:
        app: librechat
      annotations:
        checksum/config: #{CHECKSUM}#
    spec:
      containers:
      - image: #{LIBRE_IMAGE}#
        imagePullPolicy: Always
        name: librechat
        env:
        - name: HOST
          value: "0.0.0.0"
        - name: MONGO_URI
          value: "mongodb://librechat-backend-svc:27017/LibreChat"
        - name: MEILI_HOST
          value: "http://librechat-backend-svc:7700"
        envFrom:
        - configMapRef:
            name: librechat-env
        ports:
        - containerPort: 3080
          protocol: TCP
        volumeMounts:
        - mountPath: /app/librechat.yaml
          name: librechat-config
          subPath: librechat-config.yaml
        - mountPath: /app/client/public/images
          name: librechat-vol
          subPath: librechat/images
        - mountPath: /app/api/logs
          name: librechat-vol
          subPath: librechat/logs
      hostAliases:
      - hostnames:
        - #{ENDPOINT_HOST}#
        ip: #{ENDPOINT_IP}#
      initContainers:
      - name: init-mongodb
        image: mcr.microsoft.com/azurelinux/busybox:1.36
        command: ['sh', '-c', "until nc -w 1 librechat-backend-svc.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local 27017; do echo waiting for mongodb; sleep 2; done"]
      restartPolicy: Always
      volumes:
      - name: librechat-vol
        persistentVolumeClaim:
          claimName: #{PVC_NAME}#
      - name: librechat-config
        configMap:
          name: librechat-config
---
apiVersion: v1
kind: Service
metadata:
  name: librechat-svc
spec:
  ports:
  - name: librechat
    port: 3080
    protocol: TCP
    targetPort: 3080
  selector:
    app: librechat
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    appgw.ingress.kubernetes.io/appgw-ssl-certificate: #{SSL_CERT}#
    appgw.ingress.kubernetes.io/backend-protocol: http
    appgw.ingress.kubernetes.io/cookie-based-affinity: "true"
    appgw.ingress.kubernetes.io/health-probe-path: /
    appgw.ingress.kubernetes.io/request-timeout: "300"
    appgw.ingress.kubernetes.io/ssl-redirect: "true"
    appgw.ingress.kubernetes.io/waf-policy-for-path: #{WAF_POLICY}#
    kubernetes.io/ingress.allow-http: "true"
    kubernetes.io/ingress.class: azure/application-gateway
  labels:
  name: librechat-ingress
spec:
  rules:
  - host: #{FRONTEND_URL}#
    http:
      paths:
      - backend:
          service:
            name: librechat-svc
            port:
              number: 3080
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - #{FRONTEND_URL}#
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    appgw.ingress.kubernetes.io/appgw-ssl-certificate: #{SSL_CERT}#
    appgw.ingress.kubernetes.io/backend-protocol: http
    appgw.ingress.kubernetes.io/cookie-based-affinity: "true"
    appgw.ingress.kubernetes.io/health-probe-path: /mongo-express 
    appgw.ingress.kubernetes.io/health-probe-status-codes: "200-399, 401"
    appgw.ingress.kubernetes.io/request-timeout: "300"
    appgw.ingress.kubernetes.io/ssl-redirect: "true"
    appgw.ingress.kubernetes.io/waf-policy-for-path: #{WAF_POLICY}#
    kubernetes.io/ingress.allow-http: "true"
    kubernetes.io/ingress.class: azure/application-gateway
  labels:
  name: express-ingress
spec:
  rules:
  - host: #{FRONTEND_URL}#
    http:
      paths:
      - backend:
          service:
            name: mongo-express-svc
            port:
              number: 8081
        path: /mongo-express
        pathType: Prefix
  tls:
  - hosts:
    - #{FRONTEND_URL}#